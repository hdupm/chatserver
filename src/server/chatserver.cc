#include "chatserver.hpp"
#include "json.hpp"
#include "chatservice.hpp"
#include <functional>
#include <string>
using namespace std;
using namespace placeholders;
using json=nlohmann::json;

ChatServer::ChatServer(EventLoop* loop,//事件循环(reactor反应堆)
            const InetAddress& listenAddr,//IP+Port
            const string& nameArg)
            :_server(loop,listenAddr,nameArg)
            ,_loop(loop)
    {
        //注册连接回调
        _server.setConnectionCallback(std::bind(&ChatServer::onConnection,this,_1));

        //注册消息回调
        _server.setMessageCallback(std::bind(&ChatServer::onMessage,this,_1,_2,_3));

        //设置线程数量
        _server.setThreadNum(4);

    }
    //开启事件循环
void ChatServer::start()
{
    _server.start();
}

//上报连接相关信息的回调函数
void ChatServer::onConnection(const TcpConnectionPtr& conn)
{    
    //客户端断开连接 有用户下线
    if (!conn->connected())//关心连接失败 需要释放socket资源
    {
        ChatService::instance()->clientCloseException(conn);//如果客户端异常关闭需要改变连接状态
        conn->shutdown();
    }
}

//上报读写事件相关信息的回调函数
void ChatServer::onMessage(const TcpConnectionPtr& conn,//连接 通过连接读数据 写数据
                        Buffer* buffer,//缓冲区
                        Timestamp time)//接收到数据的时间信息
{
    string buf=buffer->retrieveAllAsString();//将缓冲区数据放到字符串中
    //数据的反序列化
    json js=json::parse(buf);
    //达到目的：完全解耦网络模块的代码和业务模块的代码
    //通过js["msgid"] 获取=》业务handler=》conn js time
    auto msgHandler=ChatService::instance()->getHandler(js["msgid"].get<int>());//强转为整型获得对应的事件处理器
    //回调消息绑定好的事件处理器，来执行相应的业务处理
    msgHandler(conn,js,time);


}


